{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"FilterComp <p>Welcome to FilterComp, a tool developed by Safe Solutions Engenharia for filtering, processing, and comparing datasets using the flash calculation logic from DWSIM.</p> <p>This tool was designed to streamline data analysis pipelines, enabling users to filter large datasets based on dynamic criteria, apply statistical and logical comparisons.</p>"},{"location":"#project-structure","title":"Project Structure","text":"<p>Below is the core structure of the project, highlighting the most important components you'll interact with. The <code>src/</code> directory contains all the logic and entry points for running and testing the tool, while <code>utils/</code> groups the main modules responsible for file operations, formatting, filtering, and logging.</p> <pre><code>filtercomp/\n\u2502\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 file_saver.py        # Handles data saving\n\u2502   \u2502   \u251c\u2500\u2500 format_files.py      # Handles data formatting\n\u2502   \u2502   \u251c\u2500\u2500 logger.py            # Logging setup and utilities\n\u2502   \u2502   \u251c\u2500\u2500 operation_filter.py  # Filtering logic after flashing operations\n\u2502   \u2502   \u2514\u2500\u2500 operations.py        # Defines flashing operations\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tests/                   # Unit tests for core functionality\n\u2502   \u2514\u2500\u2500 main.py                  # Main file\n\u2502\n\u2514\u2500\u2500 requirements.txt             # Project dependencies\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! To contribute:</p> <ol> <li> <p>Fork the repository</p> </li> <li> <p>Create a new feature branch</p> </li> <li> <p>Make your changes and commit</p> </li> <li> <p>Open a pull request for review</p> </li> </ol>"},{"location":"configuration/","title":"Configurations","text":""},{"location":"configuration/#enums","title":"Enums","text":"<p>Enums provide named symbolic constants, making the code more understandable and less error-prone.</p>"},{"location":"configuration/#dwsim-packages","title":"DWSIM Packages","text":"<p>Used to select the thermodynamic model from DWSIM, which governs how physical and chemical properties are calculated.</p> DWSIM Packages <pre><code>class DWSIMPackage(Enum):\n    PengRobinson1978 = 'PengRobinson1978'\n    ...\n</code></pre>"},{"location":"configuration/#format-type","title":"Format Type","text":"<p>Used to standardize the input <code>.xlsx</code> file format to match the default output structure used during the processing phase.</p> Format Type <pre><code>class FormatType(Enum):\n    DEFAULT = 'Default'\n</code></pre>"},{"location":"configuration/#filter-operations","title":"Filter Operations","text":""},{"location":"configuration/#operation-type","title":"Operation Type","text":"<p>Defines types of operations that can be performed in the filtering phase.</p> Operations Filter <pre><code>class OperationsFilter(Enum):\n    CALORIFIC_VALUE = 0\n    CO2_AND_H2S_FRACTION = 1\n    DISPERSION = 2\n    CO2_FRACTION = 3\n</code></pre>"},{"location":"configuration/#phase-type","title":"Phase Type","text":"<p>Represents the phase of the material stream: overall, vapor, oily, or aqueous.</p> Phase Type <pre><code>class PhaseType(Enum):\n    OVERALL = 'Overall'\n    VAPOR = 'Vapor'\n    OIL = 'Liquid1'\n    WATER = 'Liquid2'\n</code></pre>"},{"location":"configuration/#compound-basis","title":"Compound Basis","text":"<p>Defines the reference basis for compound data, with an associated default unit depending on the selected basis.</p> Compound Basis <pre><code>class CompoundBasis(Enum):\n    MOLE_FRAC = 'MolarComposition'\n    MASS_FRAC = 'MassComposition'\n    MOLE_FLOW = 'CompoundMolarFlow'\n    MASS_FLOW = 'CompoundMassFlow'\n\n    @property\n    def default_unit(self):\n        return {\n            CompoundBasis.MASS_FLOW: 'kg/h',\n            CompoundBasis.MOLE_FLOW: 'kmol/h',\n            CompoundBasis.MOLE_FRAC: None,\n            CompoundBasis.MASS_FRAC: None,\n        }.get(self, None)\n</code></pre>"},{"location":"configuration/#molar-flow-unit","title":"Molar Flow Unit","text":"<p>Specifies the unit of measurement for molar flow, used when a different unit is required instead of the default.</p> Molar Flow Unit <pre><code>class MolarFlowUnit(Enum):\n    KMOL_H = 'kmol/h'\n    KMOL_S = 'kmol/s'\n    MOL_S = 'mol/s'\n</code></pre>"},{"location":"configuration/#mass-flow-unit","title":"Mass Flow Unit","text":"<p>Specifies the unit of measurement for mass flow, used when a different unit is required instead of the default.</p> Mass Flow Unit <pre><code>class MassFlowUnit(Enum):\n    KG_H = 'kg/h'\n    G_H = 'g/h'\n    KG_S = 'kg/s'\n</code></pre>"},{"location":"configuration/#global-variables","title":"Global Variables","text":""},{"location":"filtering/","title":"Filters","text":"\\[ \\text{Calorific Power} \\left(\\frac {kJ}{h} \\right) = \\left[ \\sum_{i} \\left( H_i \\cdot x_i \\right) \\right] \\cdot \\dot{n} \\]"},{"location":"operations/","title":"Flash Operations","text":"\\[ \\text{Burn Rate} \\left(\\frac {kg} {m\u00b2s}\\right) = 1.27 \\cdot 10^{\\text{-6}} \\rho_f   \\left[    \\frac{\\Delta H_{\\text{c}}}        {\\Delta H_{\\text{v}} + c_p (T_{\\text{b}} - T_{\\text{f}})} \\right] \\] <p>Where:</p> <ul> <li>\\( \\rho_f \\) = Density of the fuel \\((\\text{kg/m}^3)\\)</li> <li>\\( \\Delta H_{\\text{c}} \\) = Heat of combustion \\((\\text{kJ/kg})\\)</li> <li>\\( \\Delta H_{\\text{v}} \\) = Heat of vaporization \\((\\text{kJ/kg})\\)</li> <li>\\( c_p \\) = Specific heat \\((\\text{kJ/kg\u00b7K})\\)</li> <li>\\( T_{\\text{b}} \\) = Boiling point temperature of the fuel \\((\\text{K})\\)</li> <li>\\( T_{\\text{f}} \\) = Actual fuel temperature \\((\\text{K})\\)</li> </ul> \\[ \\text{Evaporation Rate} \\left(\\frac {kg} {m\u00b2s}\\right) = k \\cdot \\left( \\frac{T_{\\text{b}} - T_{\\text{f}}}{\\Delta H_{\\text{v}}} \\right) \\] <p>Where:</p> <ul> <li>\\( k \\) = Constant (for average soil and concrete; k = 10.5)</li> <li>\\( T_{\\text{b}} \\) = Boiling point temperature of the fuel \\((\\text{K})\\)</li> <li>\\( T_{\\text{f}} \\) = Actual fuel temperature \\((\\text{K})\\)</li> <li>\\( \\Delta H_{\\text{v}} \\) = Heat of vaporization \\((\\text{kJ/kg})\\)</li> </ul> <p><pre><code>  flowchart TD\n    A[Start] --&gt; B[Save state &amp; \n    set vapor_fraction = 0];\n    B --&gt; C[Loop: vapor_fraction &lt; 1];\n    C --&gt; D[Try flash calculation at \n    T = release + \u0394T];\n    D --&gt; E{Flash succeeds?};\n    E --&gt;|Yes| F{vapor_fraction &lt; 1?};\n    F --&gt;|Yes| G[Increase \u0394T by 50 K] --&gt; C;\n    F --&gt;|No| H[Go to refinement loop];\n    E --&gt;|No| I[Adjust tolerances \n    and retries] --&gt; D;</code></pre> Representative fluxogram of the buble temperature</p> <p><pre><code>  flowchart TD\n    A[Refinement loop] --&gt; B[Loop: vapor_fraction &gt;= 1];\n    B --&gt; C[Decrease \u0394T by 1 K];\n    C --&gt; D[Try flash calculation];\n    D --&gt; E{Flash succeeds?};\n    E --&gt;|Yes| F{vapor_fraction &lt; 1?};\n    E --&gt;|No| G[Adjust tolerances \n    and retries] --&gt; D;\n    F --&gt; |No| B[Loop: vapor_fraction &gt;= 1];\n    F --&gt; |Yes| H[Refined temperature found];\n    H --&gt; I[Return \u0394T];</code></pre> Representative fluxogram of the buble temperature</p>"},{"location":"setup/","title":"Setup Guide","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<p>Ensure your system has the following installed:</p> <ul> <li>Python 3.10+</li> <li>pip</li> <li>Git</li> <li>DWSIM</li> </ul>"},{"location":"setup/#cloning-the-project","title":"Cloning the Project","text":"<p>Clone the repository to your local machine: <pre><code>git clone https://github.com/Safe-Solutions-Engenharia/filtercomp.git\ncd filtercomp\n</code></pre></p>"},{"location":"setup/#creating-a-virtual-enviroment","title":"Creating a Virtual Enviroment","text":"<p>Create and activate a virtual environment:</p> WindowsLinux/macOS <pre><code>python -m venv venv\nvenv\\Scripts\\activate\n</code></pre> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"setup/#installing-dependencies","title":"Installing Dependencies","text":"<p>Install dependencies listed in requirements.txt:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"}]}